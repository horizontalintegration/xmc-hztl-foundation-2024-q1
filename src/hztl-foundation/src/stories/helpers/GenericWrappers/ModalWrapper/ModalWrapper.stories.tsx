// Global
import type { Meta, StoryObj } from '@storybook/react';

// Lib
import { expandObj, flattenObj } from 'lib/object-parser';

// Local
import VideoWrapper from 'helpers/GenericWrappers/VideoWrapper/VideoWrapper';
import ButtonWrapper from 'helpers/SitecoreWrappers/ButtonWrapper/ButtonWrapper';
import RichTextWrapper from 'helpers/SitecoreWrappers/RichTextWrapper/RichTextWrapper';

// Local
import ModalWrapper, { ModalWrapperProps } from 'helpers/GenericWrappers/ModalWrapper/ModalWrapper';
import defaultData, {
  embeddedVideoData,
  modalWithAnchorAsTriggerData,
  modalWithRichTextTitleData,
  modalWithVideoData,
} from './ModalWrapper.mock-data';

const meta: Meta<ModalWrapperProps> = {
  argTypes: {
    content: {
      control: 'select',
      description: "A `ReactNode` representing the content of the modal's body.",
      mapping: {
        Text: (
          <RichTextWrapper
            field={{
              value:
                '<h1 class="mb-2">Eiusmod Tempor Incididunt</h1><p class="mb-2">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p><p class="mb-2">Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>',
            }}
          ></RichTextWrapper>
        ),
        Video: <VideoWrapper {...embeddedVideoData} />,
      },
      options: ['Text', 'Video'],
    },
    label: {
      description: 'The `aria-label` of the modal.',
    },
    openOnLoad: {
      control: 'boolean',
      defaultValue: false,
      description: 'A flag that determines if the modal should be opened on page load.',
    },
    id: {
      description:
        "A unique ID generated by Sitecore that will serve as the basis for the modal's ID attribute.",
    },
    size: {
      control: 'select',
      defaultValue: 'large',
      description: 'The size variant of the modal.',
      options: ['extra-large', 'large', 'medium', 'small', 'fluid'],
    },
    title: {
      control: 'select',
      description: 'A `ReactNode` representing the title of the modal.',
      mapping: {
        Title: 'Modal Title',
        'Title with Markup': (
          <>
            Modal Title with HTML Markup<sup>Â®</sup>
          </>
        ),
      },
      options: ['Title', 'Title with Markup'],
    },
    trigger: {
      control: 'select',
      defaultValue: 'Button',
      description: "A `ReactNode` representing the content of the modal's trigger.",
      mapping: {
        Anchor: <a>A text link that opens a modal.</a>,
        Button: (
          <ButtonWrapper
            ctaVariant="primary"
            id="modal-2845070A-AEBD-4B45-A59D-88269B081204-button"
            text="Modal Trigger"
            title="Modal Trigger"
            type="button"
          />
        ),
      },
      options: ['Anchor', 'Button'],
    },
    /* eslint-disable  @typescript-eslint/no-explicit-any */
  } as any,
  component: ModalWrapper,
  parameters: { controls: { sort: 'requiredFirst' } },
  tags: ['autodocs'],
  title: 'Helpers/Generic Wrappers/Modal Wrapper',
};

export default meta;

type Story = StoryObj<ModalWrapperProps>;

export const Default: Story = {
  args: {
    ...flattenObj(defaultData),
  },
  name: 'Default',
  render: (args) => {
    return <ModalWrapper {...expandObj({ ...args })} />;
  },
};

export const WithVideo: Story = {
  args: {
    ...flattenObj(modalWithVideoData),
  },
  name: 'Modal with Video',
  render: (args) => {
    return <ModalWrapper {...expandObj({ ...args })} />;
  },
};

export const WithRichTitle: Story = {
  args: {
    ...flattenObj(modalWithRichTextTitleData),
  },
  name: 'Modal with Rich Text Title',
  render: (args) => {
    return <ModalWrapper {...expandObj({ ...args })} />;
  },
};

export const WithAnchorAsTrigger: Story = {
  args: {
    ...flattenObj(modalWithAnchorAsTriggerData),
  },
  name: 'Modal with Anchor Link as Trigger',
  render: (args) => {
    return <ModalWrapper {...expandObj({ ...args })} />;
  },
};

export const WithRemoteTrigger: Story = {
  args: {},
  name: 'Modal with a Remote Trigger',
  render: () => {
    return (
      <a
        onClick={() => {
          document.dispatchEvent(
            new CustomEvent('trigger-modal', {
              detail: { modalId: 'modal-2845070A-AEBD-4B45-A59D-88269B081207' },
            })
          );
        }}
      >
        Remote Trigger
      </a>
    );
  },
};
