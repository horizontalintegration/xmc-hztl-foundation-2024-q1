// Global
import type { Meta, StoryObj } from '@storybook/react';

// Lib
import { expandObj, flattenObj } from 'lib/object-parser';

// Local
import ModalVideo, {
  ModalVideoProps,
} from 'components/authorable/shared/hztl-page-content/ModalVideo';
import defaultData from './ModalVideo.mock-data';
import ButtonWrapper from 'helpers/SitecoreWrappers/ButtonWrapper/ButtonWrapper';

const meta: Meta<ModalVideoProps> = {
  argTypes: {
    'fields.Modal.value.content': {
      table: {
        disable: true,
      },
    },
    'fields.Modal.value.label': {
      description: 'The `aria-label` of the modal.',
      name: 'label',
      table: {
        category: 'fields',
        subcategory: 'Modal',
      },
    },
    'fields.Modal.value.openOnLoad': {
      control: 'boolean',
      defaultValue: false,
      description: 'A flag that determines if the modal should be opened on page load.',
      name: 'openOnLoad',
      table: {
        category: 'fields',
        subcategory: 'Modal',
      },
    },
    'fields.Modal.value.id': {
      description:
        "A unique ID generated by Sitecore that will serve as the basis for the modal's ID attribute.",
      name: 'id',
      table: {
        category: 'fields',
        subcategory: 'Modal',
      },
    },
    'fields.Modal.value.size': {
      control: 'select',
      defaultValue: 'large',
      description: 'The size variant of the modal.',
      options: ['extra-large', 'large', 'medium', 'small', 'fluid'],
      name: 'size',
      table: {
        category: 'fields',
        subcategory: 'Modal',
      },
    },
    'fields.Modal.value.title': {
      control: 'select',
      description: 'A `ReactNode` representing the title of the modal.',
      mapping: {
        Title: 'Modal Title',
        'Title with Markup': (
          <>
            Modal Title with HTML Markup<sup>Â®</sup>
          </>
        ),
      },
      options: ['Title', 'Title with Markup'],
      name: 'title',
      table: {
        category: 'fields',
        subcategory: 'Modal',
      },
    },
    'fields.Modal.value.trigger': {
      control: 'select',
      description: "A `ReactNode` representing the content of the modal's trigger.",
      mapping: {
        Anchor: <a>A text link that opens a modal.</a>,
        Button: (
          <ButtonWrapper
            ctaVariant="primary"
            id="modal-2845070A-AEBD-4B45-A59D-88269B081204-button"
            text="Modal Trigger"
            title="Modal Trigger"
            type="button"
          />
        ),
      },
      options: ['Anchor', 'Button'],
      name: 'trigger',
      table: {
        category: 'fields',
        subcategory: 'Modal',
      },
    },
    'fields.Video.value.autoplay': {
      description: 'A flag indicating wether or not the video should begin playing automatically.',
      name: 'autoplay',
      table: {
        category: 'fields',
        subcategory: 'Video',
      },
    },
    'fields.Video.value.captions': {
      description:
        'An array of URIs indicating localized caption data to be loaded into the player.',
      name: 'captions',
      table: {
        category: 'fields',
        subcategory: 'Video',
      },
    },
    'fields.Video.value.controls': {
      defaultValue: true,
      description: 'A flag indicating wether or not to show the playback controls.',
      name: 'controls',
      table: {
        category: 'fields',
        subcategory: 'Video',
      },
    },
    'fields.Video.value.fluid': {
      description:
        "A flag indicating wether or not the player will size to fit its container at the video's intrinsic aspect ratio.",
      name: 'fluid',
      table: {
        category: 'fields',
        subcategory: 'Video',
      },
    },
    'fields.Video.value.height': {
      description: 'A value indicating the desired height of the video player.',
      if: { arg: 'fields.Video.value.fluid', truthy: false },
      name: 'height',
      table: {
        category: 'fields',
        subcategory: 'Video',
      },
    },
    'fields.Video.value.loop': {
      defaultValue: false,
      description:
        'A flag indicating wether or not the video will loop automatically once playback has ended.',
      name: 'loop',
      table: {
        category: 'fields',
        subcategory: 'Video',
      },
    },
    'fields.Video.value.muted': {
      defaultValue: false,
      description: 'A flag indicated wether or not the video player is muted.',
      name: 'muted',
      table: {
        category: 'fields',
        subcategory: 'Video',
      },
    },
    'fields.Video.value.poster': {
      defaultValue: false,
      description:
        'A URI represenging a poster image of the video asset to be loaded into the player.',
      name: 'poster',
      table: {
        category: 'fields',
        subcategory: 'Video',
      },
    },
    'fields.Video.value.sources': {
      description:
        'An array of URIs and asset types representing a video asset to be loaded into the player.',
      name: 'sources',
      table: {
        category: 'fields',
        subcategory: 'Video',
      },
    },
    'fields.Video.value.subtitles': {
      description:
        'An array of URIs indicating localized caption data to be loaded into the player.',
      name: 'subtitles',
      table: {
        category: 'fields',
        subcategory: 'Video',
      },
    },
    'fields.Video.value.width': {
      description: 'A value indicating the desired height of the video player.',
      if: { arg: 'fields.Video.value.fluid', truthy: false },
      name: 'width',
      table: {
        category: 'fields',
        subcategory: 'Video',
      },
    },
    /* eslint-disable  @typescript-eslint/no-explicit-any */
  } as any,
  component: ModalVideo,
  parameters: { controls: { sort: 'requiredFirst' } },
  title: 'Components/Authorable/Shared/hztl-page-content/Modal Video',
};

export default meta;

type Story = StoryObj<ModalVideoProps>;

export const Default: Story = {
  args: {
    ...flattenObj(defaultData),
  },
  name: 'Default',
  render: (args) => {
    return <ModalVideo {...(expandObj({ ...args }) as ModalVideoProps)} />;
  },
};
