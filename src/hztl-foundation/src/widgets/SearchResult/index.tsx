// This template was generated by @sitecore-search/cli on Tue Jul 23 2024 14:56:02 GMT+0000 (Coordinated Universal Time)
import { ArrowLeftIcon, ArrowRightIcon, CheckIcon } from '@radix-ui/react-icons';
import type {
  ActionProp,
  ItemClickedAction,
  SearchResponseFacet,
  SearchResponseSortChoice,
  SearchResultsInitialState,
  SearchResultsStoreState,
} from '@sitecore-search/react';
import {
  WidgetDataType,
  useSearchResults,
  useSearchResultsActions,
  useSearchResultsSelectedFilters,
  widget,
} from '@sitecore-search/react';
import {
  AccordionFacets,
  ArticleCard,
  FacetItem,
  Pagination,
  Presence,
  SearchResultsAccordionFacets,
  SortSelect,
} from '@sitecore-search/ui';
import { urlToFacet, useEnsureFacetUrl } from './use-ensure-facet-url';
import PreviewSearchListComponent from '../SearchPreview';

type ArticleCardItemCardProps = {
  className?: string;
  displayText?: boolean;
  article: ArticleModel;
  onItemClick: ActionProp<ItemClickedAction>;
  index: number;
};
type QueryResultsSummaryProps = {
  currentPage: number;
  itemsPerPage: number;
  totalItemsReturned: number;
  totalItems: number;
};
type SearchFacetsProps = {
  facets: SearchResponseFacet[];
};
type SearchPaginationProps = {
  currentPage: number;
  totalPages: number;
};
type SortOrderProps = {
  options: Array<SearchResponseSortChoice>;
  selected: string;
};
type SpinnerProps = {
  loading?: boolean;
};
interface RangeFacet {
  min?: number;
  max?: number;
  valueLabel?: string;
}
interface ValueFacet {
  valueLabel: string;
  min?: never;
  max?: never;
}
type SelectedFacet = RangeFacet | ValueFacet;

const DEFAULT_IMG_URL = 'https://placehold.co/500x300?text=No%20Image'; // TODO: Update with corresponding fallback image
const buildRangeLabel = (min: number | undefined, max: number | undefined): string => {
  return typeof min === 'undefined'
    ? `< $${max}`
    : typeof max === 'undefined'
      ? ` > $${min}`
      : `$${min} - $${max}`;
};
const buildFacetLabel = (selectedFacet: SelectedFacet) => {
  if ('min' in selectedFacet || 'max' in selectedFacet) {
    return `${buildRangeLabel(selectedFacet.min, selectedFacet.max)}`;
  }
  return `${selectedFacet.valueLabel}`;
};

const ArticleHorizontalItemCard = ({
  className = '',
  article,
  displayText = false,
}: ArticleCardItemCardProps) => {
  return (
    <ArticleCard.Root
      key={article.id}
      className={`group flex flex-row my-4 flex-nowrap max-h-52 w-full relative space-x-4 ${className}`}
    >
      <div className="w-[70%] pl-4 grow flex-col gap-2">
        <ArticleCard.Title className="text-4xl font-bold line-clamp-1">
          {article.title || 'Headline'}
        </ArticleCard.Title>
        <ArticleCard.Subtitle className="mt-3 text-gray-500 text-2xl line-clamp-1">
          {article.name || 'Subhead'}
        </ArticleCard.Subtitle>
        {article.description && displayText && (
          <div className="line-clamp-3 mt-3 text-base">{article.description}</div>
        )}
        <a className="underline text-base font-bold cursor-pointer" href={article.url}>
          Read more
        </a>
      </div>
      <div className="w-[30%] md:w-1/5 overflow-hidden bg-gray-200 ">
        <ArticleCard.Image
          height={'100'}
          width={'100'}
          src={article?.image_url || DEFAULT_IMG_URL}
          className="w-full h-auto object-cover rounded-themes-radius-large-image-card"
        />
      </div>
    </ArticleCard.Root>
  );
};

const Filter = () => {
  const selectedFacetsFromApi = useSearchResultsSelectedFilters();
  const { onRemoveFilter, onClearFilters } = useSearchResultsActions();
  return selectedFacetsFromApi.length > 0 ? (
    <div className="mb-4">
      <div className="flex flex-col mb-2 gap-4">
        <div
          onClick={onClearFilters}
          className="clear-filter cursor-pointer flex gap-2 text-base font-medium text-black underline text-opacity-75 hover:text-indigo-500 hover:opacity-1 focus:outline-indigo-500"
        >
          <span className="cursor-pointer">Reset Filters</span>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 10 10"
            fill="none"
          >
            <path
              d="M1 9L9 1M1 1L9 9"
              stroke="#2F2D2E"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            />
          </svg>
        </div>
      </div>
      <div className="flex flex-wrap">
        {selectedFacetsFromApi.map((selectedFacet) => (
          <button
            key={`${selectedFacet.facetId}${selectedFacet.facetLabel}${selectedFacet.valueLabel}`}
            onClick={() => onRemoveFilter(selectedFacet)}
            className="bg-black text-ellipsis text-xs font-medium text-white bg-gray-400 rounded-md pl-2 pr-5 py-1.5 m-1 whitespace-no-wrap max-w-full overflow-hidden relative cursor-pointer before:content-[''] before:-rotate-45 before:absolute before:w-2.5 before:h-0.5 before:right-2 before:top-2/4 before:bg-white after:content-[''] after:rotate-45 after:absolute after:w-2.5 after:h-0.5 after:right-2 after:top-2/4 after:bg-white focus:outline-indigo-500"
          >
            {buildFacetLabel(selectedFacet)}
          </button>
        ))}
      </div>
    </div>
  ) : (
    <></>
  );
};

const QueryResultsSummary = ({ totalItems }: QueryResultsSummaryProps) => {
  return (
    <div className="keyword flex flex-col gap-4">
      <p className="text-base">Your search for KEYWORD returned {totalItems} results</p>
      <hr />
    </div>
  );
};

// const ResultsPerPage = ({ defaultItemsPerPage }: ResultsPerPageProps) => {
//   const { onResultsPerPageChange } = useSearchResultsActions();
//   return (
//     <div>
//       <label className="pr-1">Results Per Page</label>
//       <Select.Root
//         defaultValue={String(defaultItemsPerPage)}
//         onValueChange={(v) =>
//           onResultsPerPageChange({
//             numItems: Number(v),
//           })
//         }
//       >
//         <Select.Trigger className="cursor-pointer inline-flex items-center bg-transparent h-10 gap-1 py-1 px-4 border-0 focus:outline-indigo-500">
//           <Select.SelectValue />
//           <Select.Icon />
//         </Select.Trigger>
//         <Select.SelectContent className="bg-white shadow-[2px_2px_4px_#CFCFCF] z-[100]">
//           <Select.Viewport className="p-1">
//             <Select.SelectItem
//               value="24"
//               className="flex items-center leading-none cursor-pointer select-none whitespace-no-wrap h-6 px-1 hover:bg-indigo-500 hover:text-white data-[state=checked]:text-indigo-500 data-[state=checked]:bg-white focus:outline-indigo-500"
//             >
//               <SortSelect.OptionText>24</SortSelect.OptionText>
//             </Select.SelectItem>

//             <Select.SelectItem
//               value="48"
//               className="flex items-center leading-none cursor-pointer select-none whitespace-no-wrap h-6 px-1 hover:bg-indigo-500 hover:text-white data-[state=checked]:text-indigo-500 data-[state=checked]:bg-white focus:outline-indigo-500"
//             >
//               <SortSelect.OptionText>48</SortSelect.OptionText>
//             </Select.SelectItem>

//             <Select.SelectItem
//               value="64"
//               className="flex items-center leading-none cursor-pointer select-none whitespace-no-wrap h-6 px-1 hover:bg-indigo-500 hover:text-white data-[state=checked]:text-indigo-500 data-[state=checked]:bg-white focus:outline-indigo-500"
//             >
//               <SortSelect.OptionText>64</SortSelect.OptionText>
//             </Select.SelectItem>
//           </Select.Viewport>
//         </Select.SelectContent>
//       </Select.Root>
//     </div>
//   );
// };

const SearchFacets = ({ facets }: SearchFacetsProps) => {
  const { onFacetClick } = useSearchResultsActions();
  return (
    <SearchResultsAccordionFacets
      id="facets"
      defaultFacetTypesExpandedList={[]}
      onFacetValueClick={onFacetClick}
      className=""
    >
      {facets.map((f) => (
        <AccordionFacets.Facet
          facetId={f.name}
          key={f.name}
          className="block mb-2 pb-4 border-gray-200 w-full border p-4 gap-2 rounded"
        >
          <AccordionFacets.Header className="flex">
            <AccordionFacets.Trigger className="text-sm md:text-base font-semibold focus:outline-indigo-500">
              {f.label}
            </AccordionFacets.Trigger>
          </AccordionFacets.Header>
          <AccordionFacets.Content className="mt-8">
            <AccordionFacets.ValueList className="list-none mt-2 flex flex-col space-y-2">
              {f.value.map((v, index: number) => (
                <FacetItem
                  {...{
                    index,
                    facetValueId: v.id,
                  }}
                  key={v.id}
                  className="group flex items-center text-sm cursor-pointer w-full"
                >
                  <div className="facetlabel justify-between w-11/12">
                    <AccordionFacets.ItemCheckbox className="form-checkbox flex-none w-5 h-5 border border-gray-300 rounded cursor-pointer transition duration-500 ease-in-out hover:border-heading focus:outline-indigo-500 aria-checked:bg-indigo-500 aria-checked:hover:bg-heading aria-checked:focus:bg-heading">
                      <AccordionFacets.ItemCheckboxIndicator className="text-white w-5 h-5 ">
                        <CheckIcon />
                      </AccordionFacets.ItemCheckboxIndicator>
                    </AccordionFacets.ItemCheckbox>
                    <AccordionFacets.ItemLabel className="text-sm ms-1 -mt-0.5">
                      {v.text}
                    </AccordionFacets.ItemLabel>
                  </div>
                  <div className="facetcount w-">{v.count && `(${v.count})`}</div>
                </FacetItem>
              ))}
            </AccordionFacets.ValueList>
          </AccordionFacets.Content>
        </AccordionFacets.Facet>
      ))}
    </SearchResultsAccordionFacets>
  );
};

const SearchPagination = ({ currentPage, totalPages }: SearchPaginationProps) => {
  const { onPageNumberChange } = useSearchResultsActions();
  return (
    <Pagination.Root
      currentPage={currentPage}
      defaultCurrentPage={1}
      totalPages={totalPages}
      onPageChange={(v) =>
        onPageNumberChange({
          page: v,
        })
      }
      className="mt-4 flex"
    >
      <Pagination.PrevPage
        onClick={(e) => e.preventDefault()}
        className="cursor-pointer my-0 mx-2 data-[current=true]:hidden hover:text-indigo-500 focus:outline-indigo-500"
      >
        <ArrowLeftIcon />
      </Pagination.PrevPage>
      <Pagination.Pages>
        {(pagination) =>
          Pagination.paginationLayout(pagination, {
            boundaryCount: 1,
            siblingCount: 1,
          }).map(({ page, type }) =>
            type === 'page' ? (
              <Pagination.Page
                key={page}
                aria-label={`Page ${page}`}
                page={page as number}
                onClick={(e) => e.preventDefault()}
                className="border p-2 rounded-full cursor-pointer my-0 mx-2 data-[current=true]:text-indigo-500 data-[current=true]:pointer-events-none data-[current=true]:no-underline hover:text-indigo-500 focus:outline-indigo-500"
              >
                {page}
              </Pagination.Page>
            ) : (
              <span key={type}>...</span>
            )
          )
        }
      </Pagination.Pages>
      <Pagination.NextPage
        onClick={(e) => e.preventDefault()}
        className="cursor-pointer my-0 mx-2 data-[current=true]:hidden hover:text-indigo-500 focus:outline-indigo-500"
      >
        <ArrowRightIcon />
      </Pagination.NextPage>
    </Pagination.Root>
  );
};

const SortOrder = ({ options, selected }: SortOrderProps) => {
  const selectedSortIndex = options.findIndex((s) => s.name === selected);
  const { onSortChange } = useSearchResultsActions();
  return (
    <SortSelect.Root defaultValue={options[selectedSortIndex]?.name} onValueChange={onSortChange}>
      <SortSelect.Trigger className="cursor-pointer inline-flex items-center bg-transparent h-10 gap-1 border-0 focus:outline-indigo-500 justify-between w-full">
        <SortSelect.SelectValue>
          {selectedSortIndex > -1 ? options[selectedSortIndex].label : ''}
        </SortSelect.SelectValue>
        {/* <SortSelect.Icon /> */}
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
        >
          <path
            d="M7 16V4M7 4L3 8M7 4L11 8M17 8V20M17 20L21 16M17 20L13 16"
            stroke="#2F2D2E"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
      </SortSelect.Trigger>
      <SortSelect.Content className="bg-white shadow-[4px_4px_8px_#CFCFCF] z-[100] absolute top-6 focus-within:border-indigo-500 w-full ">
        <SortSelect.Viewport className="p-1 z-[50000]">
          {options.map((option: SearchResponseSortChoice) => (
            <SortSelect.Option
              value={option}
              key={option.name}
              className="flex items-center leading-none cursor-pointer select-none whitespace-no-wrap h-10 px-1 hover:bg-indigo-500 hover:text-white data-[state=checked]:text-indigo-500 data-[state=checked]:bg-white focus:outline-indigo-500"
            >
              <SortSelect.OptionText>{option.label}</SortSelect.OptionText>
            </SortSelect.Option>
          ))}
        </SortSelect.Viewport>
      </SortSelect.Content>
    </SortSelect.Root>
  );
};

const Spinner = ({ loading = false }: SpinnerProps) => {
  return (
    <Presence present={loading}>
      <div className="text-center">
        <div role="status">
          <svg
            aria-busy={loading}
            aria-hidden={!loading}
            focusable="false"
            role="progressbar"
            viewBox="0 0 20 20"
            className="inline animate-spin w-10 text-slate-900"
          >
            <path d="M7.229 1.173a9.25 9.25 0 1 0 11.655 11.412 1.25 1.25 0 1 0-2.4-.698 6.75 6.75 0 1 1-8.506-8.329 1.25 1.25 0 1 0-.75-2.385z" />
          </svg>
          <span className="sr-only">Loading...</span>
        </div>
      </div>
    </Presence>
  );
};

type ArticleModel = {
  id: string;
  type?: string;
  title?: string;
  name?: string;
  subtitle?: string;
  url?: string;
  description?: string;
  content_text?: string;
  image_url?: string;
  source_id?: string;
};

type ArticleSearchResultsProps = {
  defaultSortType?: SearchResultsStoreState['sortType'];
  defaultPage?: SearchResultsStoreState['page'];
  defaultItemsPerPage?: SearchResultsStoreState['itemsPerPage'];
  defaultKeyphrase?: SearchResultsStoreState['keyphrase'];
};

type InitialState = SearchResultsInitialState<'itemsPerPage' | 'keyphrase' | 'page' | 'sortType'>;

export const SearchResultsWithInputComponent = ({
  defaultSortType = 'featured_desc',
  defaultPage = 1,
  defaultKeyphrase = '',
  defaultItemsPerPage = 24,
}: ArticleSearchResultsProps) => {
  // const [searchText, setSearchText] = useState<string>('');
  // const [commitedSearchText, setCommitedSearchText] = useState<string>('');
  // const searchParam = useSearchParams();

  // useEffect(() => {
  //   const searchString: string | null = searchParam.get('q') || '';
  //   setCommitedSearchText(searchString);
  //   setSearchText(searchString);
  // }, []);

  const searchResults = useSearchResults<ArticleModel, InitialState>({
    config: {
      defaultFacetType: 'text',
    },
    state: () => {
      const hasWindow = typeof window !== 'undefined';
      const hash = hasWindow ? window.location.hash.replace('#', '') : '';
      const facetsFromUrl = urlToFacet(hash);
      const defaultSearchText = hasWindow && window.location.search.replace('=', ' ').split(' ')[1];

      return {
        sortType: defaultSortType,
        page: defaultPage,
        itemsPerPage: defaultItemsPerPage,
        keyphrase: defaultSearchText || defaultKeyphrase,
        selectedFacets: facetsFromUrl,
      };
    },
  });

  const {
    widgetRef,
    actions,
    state,
    queryResult: { isLoading, isFetching, data },
  } = searchResults;

  const {
    total_item: totalItems = 0,
    sort: { choices: sortChoices = [] } = {},
    facet: facets = [],
    content: articles = [],
  } = data ?? {};

  const { itemsPerPage, sortType, page } = state;

  const { onItemClick } = actions;

  // Ensure that facets are synced with url
  useEnsureFacetUrl(actions, facets);

  const totalPages = Math.ceil(totalItems / itemsPerPage);

  // const onHandle = (e: FormEvent<HTMLFormElement>) => {
  //   e.preventDefault();
  //   setCommitedSearchText(searchText);
  //   onKeyphraseChange({
  //     keyphrase: searchText,
  //   });
  // };

  // const keyphraseChangeFn = (e: ChangeEvent<HTMLInputElement>) => {
  //   const searchText = e.target.value;
  //   setSearchText(searchText);
  // };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-screen w-full bg-white">
        <Spinner loading />
      </div>
    );
  }

  return (
    <div ref={widgetRef}>
      <div className="flex sm:flex-col md:flex-row relative max-w-full px-4 text-black text-opacity-75">
        {isFetching && (
          <div className="w-full h-full fixed top-0 left-0 bottom-0 right-0 z-30 bg-white opacity-50">
            <div className="absolute top-[50%] left-[50%] -translate-x-[50%] -translate-y-[50%] flex flex-col justify-center items-center z-40">
              <Spinner loading />
            </div>
          </div>
        )}
        {totalItems > 0 && (
          <>
            <section className="flex flex-col flex-none relative md:gap-4 gap-4  mr-8 w-full lg:w-[25%] font-modern">
              <div className="relative block w-full my-4">
                {/* <form id="searchSubmit" onSubmit={onHandle}>
                  <input
                    onChange={(e) => keyphraseChangeFn(e)}
                    className="peer border rounded w-full p-2 pr-[25px] focus:outline-indigo-500"
                    value={searchText}
                  />
                </form>
                <MagnifyingGlassIcon className="absolute right-[5px] top-[10px] w-[20px] h-[20px] text-gray-400 peer-focus:text-indigo-500" /> */}
                <PreviewSearchListComponent
                  rfkId={'rfkid_101'}
                  defaultItemsPerPage={5}
                  hasShowMoreFunc={true}
                />
              </div>
              <div className="sort-order flex flex-col gap-4">
                <h3 className="text-sm md:text-base font-semibold">Refine By</h3>
                <label className="text-base font-bold" htmlFor="sorting">
                  Sort
                </label>
                <div id="sorting" className="sort-wrapper border rounded px-2">
                  <SortOrder options={sortChoices} selected={sortType} />
                </div>
              </div>
              <div className="filter">
                <Filter />
              </div>
              <div className="search-facets">
                <label htmlFor="facets" className="text-base font-bold">
                  Filter
                </label>
                <SearchFacets facets={facets} />
              </div>
            </section>
            <section className="flex flex-col flex-[4_1_0%] gap-4 font-modern md:p-4">
              {/* Sort Select */}
              {totalItems > 0 && (
                <QueryResultsSummary
                  currentPage={page}
                  itemsPerPage={itemsPerPage}
                  totalItems={totalItems}
                  totalItemsReturned={articles.length}
                />
              )}
              <section className="flex justify-between text-xs">
                {/* <SortOrder options={sortChoices} selected={sortType} /> */}
              </section>

              {/* Results */}
              <div className="w-full">
                {articles.map((a, index) => (
                  <>
                    <ArticleHorizontalItemCard
                      key={a.id}
                      article={a as ArticleModel}
                      index={index}
                      onItemClick={onItemClick}
                      displayText={true}
                    />
                  </>
                ))}
              </div>
              <div className="flex flex-col md:flex-row text-xs w-full justify-center">
                {/* <ResultsPerPage defaultItemsPerPage={defaultItemsPerPage} /> */}
                <SearchPagination currentPage={page} totalPages={totalPages} />
              </div>
            </section>
          </>
        )}
        {totalItems <= 0 && !isFetching && (
          <>
            <section className="flex flex-col flex-none relative gap-4 mr-8 w-full md:w-[25%] font-modern">
              <div className="relative block w-full my-4">
                {/* <form id="searchSubmit" onSubmit={onHandle}>
                  <input
                    onChange={(e) => keyphraseChangeFn(e)}
                    className="peer border rounded w-full p-2 pr-[25px] focus:outline-indigo-500"
                    value={searchText}
                  />
                </form>
                <MagnifyingGlassIcon className="absolute right-[5px] top-[10px] w-[20px] h-[20px] text-gray-400 peer-focus:text-indigo-500" /> */}
              </div>
            </section>
            <div className="w-full flex justify-center">
              <h3>0 Results</h3>
            </div>
          </>
        )}
      </div>
    </div>
  );
};

const SearchResultsWithInputWidget = widget(
  SearchResultsWithInputComponent,
  WidgetDataType.SEARCH_RESULTS,
  'content'
);

export default SearchResultsWithInputWidget;
